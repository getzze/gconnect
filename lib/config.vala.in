namespace Gconnect.Config {
    public const string BUILD_VERSION = "@GCONNECT_VERSION_MAJOR@.@GCONNECT_VERSION_MINOR@.@GCONNECT_VERSION_REVISION@";
    public const string PACKAGE_SUFFIX = "@GCONNECT_VERSION_API@";
    public const string APP_NAME = "@PROJECT_NAME@";

    public string parse_dbus_path (string path) {
        // TODO: replace characters that are not allowed as a dbus or GSettings path
        return path;
    }

    public class Config : Object {
        private GLib.Settings settings;
        private GLib.Settings root_devices_settings;
        private Gee.HashMap<string,GLib.Settings> devices_settings;
        private string _device_id;
        private string _device_category = "desktop";
        
//         public Crypt crypt { get; private set; default = null; }
        public string device_name {get; set;}

        public string device_id {
            get {
                string host_name = Environment.get_host_name();
                string user = Environment.get_user_name();
                _device_id = @"gconnect:$user@$host_name";
                return _device_id;
            }
        }       
        
        public string device_category {
            get { return _device_category;}
        }

        private Config() {
            init_user_dirs();

// 			this.crypt = init_crypto();

            this.settings = new Settings("org.gconnect");
            this.settings.bind("name", this, "device_name", SettingsBindFlags.DEFAULT);
            this.root_devices_settings = new Settings("org.gconnect.paired-devices");
            
//            bool dbg = true;
//            if (dbg) {
//                var dev_info = DeviceManager.DeviceInfo();
//                dev_info.name = this.device_name;
//                dev_info.category = this.device_category;
//                dev_info.protocol_version = NetworkProtocol.PROTOCOL_VERSION;
//                dev_info.incoming = {};
//                dev_info.outgoing = {};
                
//                this.add_paired_device(this.device_id, dev_info);
//            }
        }

        public static Config instance() {
            var c = new Config();
            return c;
        }

        public string[] get_paired_devices() {
            return this.settings.get_strv("paired-devices");
        }       

        public string[] get_auto_pair_devices() {
            return this.settings.get_strv("auto-pair-devices");
        }       

        public void add_paired_device (string raw_id, DeviceManager.DeviceInfo dev_info) {
            // Use a gsettings-compatible id.
            string id = parse_dbus_path(raw_id);

            var paired = new Gee.ArrayList<string>.wrap(this.get_paired_devices());
            
            bool res = false;
            if (!paired.contains(id)) {
                res = paired.add(id);
            }

            if (res) {
                var dev = new Settings.with_path("org.gconnect.device", "/apps/gconnect/devices/" + id + "/");
                dev.set_string("id", raw_id);
                dev.set_string("name", dev_info.name);
                dev.set_string("type", dev_info.category);
                dev.set_int("protocol-version", dev_info.protocol_version);
                dev.set_strv("incoming-capabilities", dev_info.incoming);
                dev.set_strv("outgoing-capabilities", dev_info.outgoing);
                devices_settings[id] = dev;

                this.settings.set_strv("paired-devices", paired.to_array());
                message("New trusted device added %s: %s (%s=%d), %s, %s",
                        dev.get_string("id"),
                        dev.get_string("name"),
                        dev.get_string("type"),
                        dev.get_int("protocol-version"),
                        string.join(",", dev.get_strv("incoming-capabilities")),
                        string.join(",", dev.get_strv("outgoing-capabilities"))
                );
            } else {
                message("Could not add id %s to the paired devices list: %s", 
                        id, string.joinv(";", paired.to_array()));
            }
        }
        
        public void remove_paired_device (string raw_id) {
            // Use a gsettings-compatible id.
            string id = parse_dbus_path(raw_id);

            var paired = new Gee.ArrayList<string>.wrap(this.get_paired_devices());
            bool res = paired.remove(id);
            if (res) {
                var dev = devices_settings[id];
                dev.reset("id");
                dev.reset("name");
                dev.reset("type");
                dev.reset("protocol-version");
                dev.reset("incoming-capabilities");
                dev.reset("outgoing-capabilities");
                devices_settings.unset(id);
                
                this.settings.set_strv("paired-devices", paired.to_array());
            } else {
                message("Could not remove id %s from the paired devices list: %s",
                        id, string.joinv(";", paired.to_array()));
            }
        }
        
        public DeviceManager.DeviceInfo get_paired_device(string raw_id) {
            // Use a gsettings-compatible id.
            string id = parse_dbus_path(raw_id);

            DeviceManager.DeviceInfo dev_info = {};
            // TODO: add cache
            var paired = new Gee.ArrayList<string>.wrap(this.get_paired_devices());
            bool res = paired.contains(id);
            if (res) {
                var dev = devices_settings[id];
                dev_info.name = dev.get_string("name");
                dev_info.category = dev.get_string("type");
                dev_info.protocol_version = dev.get_int("protocol-version");
                dev_info.incoming = dev.get_strv("incoming-capabilities");
                dev_info.outgoing = dev.get_strv("outgoing-capabilities");
            } else {
                message("Could not retrieve device id %s from the paired devices list: %s",
                        id, string.joinv(";", paired.to_array()));
            }
            
            return dev_info;
        }
        
        public static string get_storage_dir() {
            return Path.build_filename(Environment.get_user_data_dir(),
                                    APP_NAME);
        }

        public static string get_config_dir() {
            return Path.build_filename(Environment.get_user_config_dir(),
                                    APP_NAME);
        }

        public static string get_cache_dir() {
            return Path.build_filename(Environment.get_user_cache_dir(),
                                    APP_NAME);
        }

        public static string get_plugins_local_dir() {
            return Path.build_filename(get_storage_dir(), "/plugins");
        }

        public static string get_plugins_global_dir() {
            return Path.build_filename("@CMAKE_INSTALL_FULL_DATADIR@", "@PROJECT_NAME@/plugins");
        }

        private static void init_user_dirs() {
            DirUtils.create_with_parents(get_storage_dir(), 0700);
            DirUtils.create_with_parents(get_config_dir(), 0700);
        }

//         private static Crypt init_crypto() {
//             string key_path = get_storage_dir() + "/private.pem";
//             return new Crypt.for_key_path(key_path);
//         }
    }
}
