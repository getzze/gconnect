#
#
# Library Target: linked against executable and tests.

# The library short description
set(GCONNECT_SHORT_DESCRIPTION "KDEConnect protocol implementation in Vala")

# Generate a config.vala file, which can be used for version
# information and feature detection.
configure_file(
    "${CMAKE_CURRENT_SOURCE_DIR}/config.vala.in"
    "${CMAKE_CURRENT_BINARY_DIR}/config.vala"
    @ONLY)

# You can re-type these if you prefer; putting them in variables makes
# it easier to reuse them, and helps explain what each command needs
# to include.

# The name of the C header, without the trailing ".h"
set(GCONNECT_HEADER ${PROJECT_NAME})

# These are the Vala sources you want to build your library out of.
set(GCONNECT_VALA_SOURCES
    "${CMAKE_CURRENT_BINARY_DIR}/config.vala"
    packet.vala
    pluginmanager.vala
    devicemanager.vala
    connection.vala
    channels/loopback/loopbackconnection.vala
    core.vala
)

## Add Lan provider
list(APPEND VALA_COMPILER_FLAGS "--define=GCONNECT_LAN")
list(APPEND GCONNECT_VALA_SOURCES 
    channels/lan/lanlinkprovider.vala
    channels/lan/landevicelink.vala
    channels/lan/lanconfig.vala
)

## Add custom vapi
list(APPEND GCONNECT_VALA_SOURCES 
    crypt/crypt.c
    crypt/crypt.vapi
    ${GCONNECT_CUSTOM_VAPIS}/gnutls.vapi
    ${GCONNECT_CUSTOM_VAPIS}/uuid.vapi
)



# Any dependencies.  Note that it isn't actually necessary to add
# glib-2.0 or gobject-2.0 (it is done implicitly), but for this
# template project we don't actually depend on anything else, so we
# added it for illustrative purposes.
set(GCONNECT_VALA_PACKAGES
    libpeas-1.0
	json-glib-1.0
	libpeas-1.0
    gee-0.8
)

# Compile Vala -> C
vala_precompile_target(
    "${GCONNECT_LIBRARY_NAME}-vala"
    GCONNECT_C_SOURCES
    PACKAGES ${GCONNECT_VALA_PACKAGES}
    VAPI "${CMAKE_CURRENT_BINARY_DIR}/${GCONNECT_PKG_NAME}.vapi"
    GIR "${GCONNECT_GIR_NAME}.gir"
    LIBRARY "${GCONNECT_LIBRARY_NAME}"
    HEADER "${CMAKE_CURRENT_BINARY_DIR}/${GCONNECT_PKG_NAME}.h"
    ${GCONNECT_VALA_SOURCES})

## Uncomment if external dependencies are required
## Any dependencies that appear in the library vapi
## they should be included in the .deps file
#set(GCONNECT_VALA_EXTERN_PACKAGES)
## Write list of dependency file (Makefile style)
#file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/${GCONNECT_PKG_NAME}.deps" "" )
#foreach(var ${GCONNECT_VALA_EXTERN_PACKAGES})
    #file(APPEND "${CMAKE_CURRENT_BINARY_DIR}/${GCONNECT_PKG_NAME}.deps"
        #"${var}\n")
#endforeach(var)

#GSettings
include(GSettings)
add_schema("gconnect.gschema.xml")
## Add Lan provider
add_schema("channels/lan/gconnect.lan.gschema.xml")

# Compile the library.
#
# By default, we create and install a shared library.  If you don't
# want to do that, you can change "SHARED" in the below function call
# to "STATIC".
add_library(${GCONNECT_LIBRARY_NAME}
    SHARED
    ${GCONNECT_C_SOURCES})

# Make sure the Vala sources are compiled to C before attempting to
# build the library.
add_dependencies("${GCONNECT_LIBRARY_NAME}" "${GCONNECT_LIBRARY_NAME}-vala")

target_include_directories(${GCONNECT_LIBRARY_NAME} PRIVATE crypt)


# Generate a .gitignore
file(WRITE  ".gitignore" "# Automatically generated by CMake, do not modify.\n")
foreach(file
    ".gitignore"
    "${CMAKE_SHARED_LIBRARY_PREFIX}${GCONNECT_LIBRARY_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX}*"
    "${CMAKE_STATIC_LIBRARY_PREFIX}${GCONNECT_LIBRARY_NAME}${CMAKE_STATIC_LIBRARY_SUFFIX}"
    "${CMAKE_SHARED_LIBRARY_PREFIX}${GCONNECT_LIBRARY_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX}.${GCONNECT_VERSION_API}"
    "${CMAKE_SHARED_LIBRARY_PREFIX}${GCONNECT_LIBRARY_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX}.${GCONNECT_VERSION_API}.${GCONNECT_VERSION_REVISION}"
    "${GCONNECT_PKG_NAME}.pc"
    "config.vala")
  file(APPEND ".gitignore" "/${file}\n")
endforeach(file)
foreach(file ${GCONNECT_C_SOURCES})
  string(REPLACE "${CMAKE_CURRENT_BINARY_DIR}/" "" file ${file})
  file(APPEND ".gitignore" "/${file}\n")
endforeach(file)

# Define the gettext domain
set_property (TARGET ${GCONNECT_LIBRARY_NAME}
    APPEND PROPERTY COMPILE_DEFINITIONS GETTEXT_PACKAGE="${GETTEXT_PACKAGE}")

# If you don't want to build and install a shared library, comment out
# (or remove) everything below this point.

# Set the library's version information
set_target_properties (${GCONNECT_LIBRARY_NAME} PROPERTIES
    SOVERSION "${GCONNECT_SOVERSION_CURRENT}.${GCONNECT_SOVERSION_REVISION}.${GCONNECT_SOVERSION_AGE}"
    VERSION   "${GCONNECT_SOVERSION_CURRENT}.${GCONNECT_SOVERSION_REVISION}")

# GObject Introspection support
find_package(GObjectIntrospection REQUIRED)
# Gir Repositories support
find_file(GIREPOSITORY_FILE GObject-2.0.gir /usr/share/gir-1.0 )
if(GIREPOSITORY_FILE)
else()
    message(FATAL_ERROR "Package libgirepository-dev not found.")
endif()

# We already had valac write a GIR, now we need to compile it to a
# typelib.
gobject_introspection_compile(
  "${CMAKE_CURRENT_BINARY_DIR}/${GCONNECT_GIR_NAME}.typelib"
  "${CMAKE_CURRENT_BINARY_DIR}/${GCONNECT_GIR_NAME}.gir")

# Telling CMake you want to install a file doesn't actually get it to
# *build* that file.  The workaround is to add a custom target which
# is always built and depens on the file we want to install.
add_custom_target(typelib ALL DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/${GCONNECT_GIR_NAME}.typelib")

# Install our typelib
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${GCONNECT_GIR_NAME}.typelib"
    DESTINATION "${GI_TYPELIB_DIR}")

# Install our GIR
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${GCONNECT_GIR_NAME}.gir"
    DESTINATION "${GI_REPOSITORY_DIR}")

# Install our VAPI
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${GCONNECT_PKG_NAME}.vapi
    DESTINATION ${CMAKE_INSTALL_DATADIR}/vala/vapi)

# Install the library
install (TARGETS ${GCONNECT_LIBRARY_NAME}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}  # On Windows, the DLL goes in the same place as the executables
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}  # This is where shared libraries (*.so on Linux, *.dynlib on OS X)
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}) # Finally, this is where static libraries (*.a) go

# Install the C header
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${GCONNECT_PKG_NAME}.h
    DESTINATION ${CMAKE_INSTALL_FULL_INCLUDEDIR})

# Generate and install a pkg-config file
configure_file (
    "${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}.pc.in"
    "${CMAKE_CURRENT_BINARY_DIR}/${GCONNECT_PKG_NAME}.pc"
    @ONLY)
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${GCONNECT_PKG_NAME}.pc
  DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)

if (BUILD_DOC)
    # Generate documentation
    find_package(Valadoc)
    if(${VALADOC_FOUND})
        valadoc_generate(html
            PACKAGE_NAME ${GCONNECT_PKG_NAME}
            PACKAGE_VERSION "${GCONNECT_VERSION_MAJOR}.${GCONNECT_VERSION_MINOR}.${GCONNECT_VERSION_REVISION}"
            SOURCES ${GCONNECT_VALA_SOURCES}
            PACKAGES ${GCONNECT_VALA_PACKAGES})
        valadoc_generate(devhelp
            DOCLET devhelp
            PACKAGE_NAME ${GCONNECT_PKG_NAME}
            PACKAGE_VERSION "${GCONNECT_VERSION_MAJOR}.${GCONNECT_VERSION_MINOR}.${GCONNECT_VERSION_REVISION}"
            SOURCES ${GCONNECT_VALA_SOURCES}
            PACKAGES ${GCONNECT_VALA_PACKAGES})

        install(DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/devhelp/${GCONNECT_PKG_NAME}"
            DESTINATION "${CMAKE_INSTALL_DATADIR}/devhelp/books")
        add_custom_target(doc ALL
            DEPENDS html devhelp)
    endif()
endif (BUILD_DOC)
